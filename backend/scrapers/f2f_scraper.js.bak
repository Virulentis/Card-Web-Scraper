const playwright = require('playwright');
const { CardCondition } = require('../data_structures'); // Assuming data_structures.js is in parent dir
// We'll get config from the main server.js call, not directly from config.js here for better modularity

// Ported from utils.py
function findCardFrame(fullCardName) {
    let res = "";
    const keywords = [
        "extended", "borderless", "promo", "serial numbered",
        "showcase", "oversized", "retro", "chinese", "japanese"
    ];
    const lowerCaseName = fullCardName.toLowerCase();

    for (const keyword of keywords) {
        if (lowerCaseName.includes(keyword)) {
            if (res === "") {
                res += keyword;
            } else {
                res += `, ${keyword}`;
            }
        }
    }
    return res;
}

async function scrapeF2F(searchCardName, currentConfig) {
    console.log(`[F2F Scraper] Searching for: ${searchCardName}`);
    const results = [];
    const browser = await playwright.chromium.launch({ headless: true }); // Use config for headless later
    const context = await browser.newContext({
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36'
    });
    const page = await context.newPage();

    const searchUrl = `https://www.facetofacegames.com/search/?keyword=${encodeURIComponent(searchCardName)}&general%20brand=Magic%3A%20The%20Gathering`;

    try {
        await page.goto(searchUrl, { waitUntil: 'domcontentloaded', timeout: 30000 }); // Increased timeout
        await page.waitForSelector('.hawk-results__action-stockPrice', { timeout: 15000 }); // Increased timeout

        const itemHandles = await page.$$('.hawk-results-item__inner');

        for (const itemHandle of itemHandles) {
            const fullCardName = await itemHandle.$eval('.hawk-results__hawk-contentTitle', el => el.textContent.trim());
            const normalizedCardName = fullCardName.replace(/(?:\s*\(.*|\s*-\s*.*)/g, "").trim();

            if (searchCardName.toLowerCase() !== normalizedCardName.toLowerCase()) {
                // console.log(`[F2F Scraper] Skipping ${normalizedCardName} as it does not match ${searchCardName}`);
                continue;
            }

            const cardSet = await itemHandle.$eval('.hawk-results__hawk-contentSubtitle', el => el.textContent.trim());
            const frame = findCardFrame(fullCardName);

            // Extracting conditions and finishes is complex due to their dynamic IDs
            // This part needs careful translation of the Python logic that uses regex on IDs
            // For now, let's get prices and stock first.
            // The original Python code iterates `item.find_all(id=finish_pattern)` and `condition_pattern`
            // then `item.find_all(class_="hawkPrice")`. This implies these are siblings or descendants of `itemHandle`.

            const priceElements = await itemHandle.$$('.hawkPrice');
            const variantIds = [];
            for (const priceEl of priceElements) {
                variantIds.push(await priceEl.getAttribute('data-var-id'));
            }

            // This logic for conditions and finishes needs to be more robust.
            // The Python code suggests multiple conditions/finishes per item, which are then matched to prices.
            // It uses `item.find_all(id=re.compile(r'condition_'))` which is hard to directly map without seeing live HTML.
            // Let's assume for now a simplified structure where each price found is a variant.

            for (const variantId of variantIds) {
                const priceText = await itemHandle.$eval(`.hawkPrice[data-var-id="${variantId}"]`, el => el.textContent);
                const stockText = await itemHandle.$eval(`.hawkStock[data-var-id="${variantId}"]`, el => el.getAttribute('data-stock-num'));

                const price = parseFloat(priceText.replace(/[^0-9.]/g, ''));
                const stock = parseInt(stockText, 10);

                if (!currentConfig.ALLOW_OUT_OF_STOCK && stock === 0) {
                    continue;
                }

                // TODO: Determine is_foil and condition accurately.
                // This is a placeholder. The Python code has complex logic for this.
                // We need to inspect how 'finish_' and 'condition_' IDs relate to 'data-var-id'
                let is_foil = false; // Default, needs proper logic
                let condition = CardCondition.UNKNOWN; // Default

                // Example: if fullCardName contains "Foil"
                if (fullCardName.toLowerCase().includes('foil')) {
                    is_foil = true;
                }
                if (!currentConfig.ALLOW_FOIL && is_foil) {
                    continue;
                }

                // Simplified condition mapping based on name, very rough
                if (fullCardName.toLowerCase().includes('near mint')) condition = CardCondition.NM;
                else if (fullCardName.toLowerCase().includes('played')) condition = CardCondition.MP; // or SP

                results.push({
                    card_name: normalizedCardName,
                    card_set: cardSet,
                    condition: condition,
                    is_foil: is_foil,
                    retailer: 'F2F',
                    stock: stock,
                    price: price,
                    frame: frame,
                    link: page.url() // Or a more specific link if available per item
                });
            }
        }
    } catch (error) {
        console.error(`[F2F Scraper] Error scraping ${searchCardName} from F2F:`, error);
        // Consider returning partial results or an error status
    } finally {
        await browser.close();
    }

    console.log(`[F2F Scraper] Found ${results.length} items for ${searchCardName}`);
    return results;
}

module.exports = { scrapeF2F, findCardFrame };
