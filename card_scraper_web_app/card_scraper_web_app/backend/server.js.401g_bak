const express = require('express');
const { getConfig, setConfig } = require('./config');
const { scrapeF2F } = require('./scrapers/f2f_scraper');
const { scrapeWIZ } = require('./scrapers/wiz_scraper'); // Added WIZ

const app = express();
const PORT = process.env.PORT || 3001;

app.use(express.json());

app.get('/api/config', (req, res) => {
    res.json(getConfig());
});

app.put('/api/config', (req, res) => {
    const newConfig = req.body;
    const updatedConfig = setConfig(newConfig);
    res.json({ message: 'Configuration updated', config: updatedConfig });
});

app.post('/api/scrape/quick', async (req, res) => {
    const { cardName } = req.body;
    const currentConfig = getConfig();

    if (!cardName) {
        return res.status(400).json({ error: 'cardName is required' });
    }
    try {
        console.log(`Initiating quick scrape for: ${cardName}`);
        let allResults = [];

        // Run F2F scraper if enabled in config (or always for now)
        if (currentConfig.IS_F2F_SCRAPE !== false) { // Check if explicitly false
            console.log("Running F2F scraper...");
            const f2fResults = await scrapeF2F(cardName, currentConfig);
            if (f2fResults) allResults = allResults.concat(f2fResults);
            console.log(`F2F returned ${f2fResults ? f2fResults.length : 0} results.`);
        }

        // Run WIZ scraper if enabled in config (or always for now)
        if (currentConfig.IS_WIZ_SCRAPE !== false) { // Check if explicitly false
            console.log("Running WIZ scraper...");
            const wizResults = await scrapeWIZ(cardName, currentConfig);
            if (wizResults) allResults = allResults.concat(wizResults);
            console.log(`WIZ returned ${wizResults ? wizResults.length : 0} results.`);
        }

        console.log(`Total results for ${cardName}: ${allResults.length}`);
        res.json({ message: `Quick scrape completed for: ${cardName}`, data: allResults });

    } catch (error) {
        console.error('Scraping error in route /api/scrape/quick:', error);
        res.status(500).json({ error: 'Failed to scrape card data' });
    }
});

// Placeholder for full scrape endpoint
app.post('/api/scrape/full', (req, res) => {
    const { cardList } = req.body;
    if (!cardList || !Array.isArray(cardList) || cardList.length === 0) {
        return res.status(400).json({ error: 'cardList (array of strings) is required' });
    }
    // TODO: Implement full scraping logic using cardList and selected scrapers
    res.json({ message: 'Full scrape initiated (placeholder).', data: [] });
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
